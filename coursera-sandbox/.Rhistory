train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
# clear all
rm(list = ls())
# libraries
library(caret)
library(rpart.plot)
library(ElemStatLearn)
#data
data(SAheart)
set.seed(8484)
#test and train
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
colnames(trainSA)
mod1 <- train(data=trainSA, method="glm", family="binomial", chd ~ age + alcohol+  obesity + tobacco + typea + ldl)
# clear all
rm(list = ls())
# libraries
library(caret)
library(rpart.plot)
library(ElemStatLearn)
#data
data(SAheart)
set.seed(8484)
#test and train
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
#model
set.seed(13234)
mod1 <- train(data=trainSA, method="glm", family="binomial", chd ~ age + alcohol+  obesity + tobacco + typea + ldl)
View(testSA)
trainSA$chd <- as.factor(trainSA$chd)
mod1 <- train(data=trainSA, method="glm", family="binomial", chd ~ age + alcohol+  obesity + tobacco + typea + ldl)
mod1$finalModel
rpart.plot(mod1$finalModel)
plot(mod1$finalModel)
mod1$finalModel
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict1 <- predict(mod1, training[,-"chd"])
testSA[,-"chd"]
testSA[,-c("chd")]
testSA[,c("chd")]
testSA[,-c("chd")]
testSA[,!c("chd")]
View(testSA)
testSA[,-10]
colnames(testSA[,-10])
# clear all
rm(list = ls())
# libraries
library(caret)
library(rpart.plot)
library(ElemStatLearn)
# data
data(SAheart)
set.seed(8484)
# test and train
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA$chd <- as.factor(trainSA$chd)
testSA = SAheart[-train,]
trainSA$chd <- as.factor(trainSA$chd)
# model
set.seed(13234)
mod1 <- train(data=trainSA, method="glm", family="binomial", chd ~ age + alcohol+  obesity + tobacco + typea + ldl)
# model analysis
mod1$finalModel
plot(mod1$finalModel)
# clear all
rm(list = ls())
# libraries
library(caret)
library(rpart.plot)
library(ElemStatLearn)
# data
data(SAheart)
set.seed(8484)
# test and train
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA$chd <- as.factor(trainSA$chd)
testSA = SAheart[-train,]
trainSA$chd <- as.factor(trainSA$chd)
# model
set.seed(13234)
mod1 <- train(data=trainSA, method="glm", family="binomial", chd ~ age + alcohol+  obesity + tobacco + typea + ldl)
# model analysis
mod1$finalModel
#plot(mod1$finalModel)
# predict on train
predict1 <- predict(mod1, trainSA[,-10])
confusionMatrix(predict1, trainSA[, 10])
missClass(predict1, trainSA[, 10])
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(predict1, trainSA[, 10])
predict1
trainSA[, 10]
missClass = function(as.numeric(values), as.numeric(prediction)) {
sum(((prediction > 0.5) * 1) != values) / length(values)
}
missClass(as.numeric(predict1), as.numeric(trainSA[, 10]))
missClass(as.numeric(predict1), as.numeric(trainSA[, 10]))
# predict on test
predict1 <- predict(mod1, testSA[,-10])
confusionMatrix(predict1, testSA[, 10])
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4.R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4.R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4.R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4.R', echo=TRUE)
predictTest <- predict(mod1, newdata = testSA)
confusionMatrix(predictTest, testSA[, 10])
predictTrain <- predict(mod1, newdata = trainSA)
confusionMatrix(predictTrain, trainSA[, 10])
missClass(testSA$chd, predict(mod1, newdata = testSA))
missClass(as.numeric(testSA$chd), as.numeric(predict(mod1, newdata = testSA)))
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4(2).R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4(2).R', echo=TRUE)
missClass(as.numeric(testSA$chd), as.numeric(predict(modelSA, newdata = testSA)))
missClass(as.numeric(trainSA$chd, predict(modelSA, newdata = trainSA)))
missClass(as.numeric(trainSA$chd), as.numeric(predict(modelSA, newdata = trainSA)))
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.4.R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.5.R', echo=TRUE)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.5.R', echo=TRUE)
test <- data(vowel.train)
train <- data(vowel.test)
View(vowel.train)
data(vowel.test)
test <- as.data.frame(vowel.test)
View(test)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 3.5.R', echo=TRUE)
mod1 <- train(y ~ ., data = train, method="rf")
library(caret)
set.seed(33833)
mod1 <- train(y ~ ., data = train, method="rf")
mod1 <- train(y ~ ., data = train, method="rf")
mod1$finalModel
varImp(mod1)
varImpPlot(mod1)
varImpPlot(mod1)
varImp(mod1)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
varImp(modvowel)
varImpPlot(modvowel)
varImp(mod1)
plot(varImp(mod1))
rm(list = ls())
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.1.R', echo=TRUE)
train <- data(vowel.train)
test <- data(vowel.test)
train <- data(vowel.train)
test <- data(vowel.test)
data(vowel.train)
data(vowel.test)
train <- data(vowel.train)
test <- data(vowel.test)
dim(data(vowel.train))
head(vowel.train)
View(vowel.train)
train$y <- as.factor(train$y)
train <- data(vowel.train)
test <- data(vowel.test)
train$y <- as.factor(train$y)
train <- data(vowel.train)
train <- data(vowel.train)
train <- vowel.train
test <- vowel.test
train$y <- as.factor(train$y)
test$y <- as.factor(train$y)
test$y <- as.factor(test$y)
seed(33833)
set.seed(33833)
library(caret)
mod1 <- train(y~.,data=train,method="rf")
mod1
mod2 <- train(y~.,data=train,method="gbm")
results1 <- predict(mod1, test$y)
results1 <- predict(mod1, test[c("y")])
mod2
results1 <- predict(mod1, test[,-1])
confusionMatrix(predict1, test[,1])
predict1 <- predict(mod1, test[,-1])
confusionMatrix(predict1, test[,1])
predict2 <- predict(mod2, test[,-1])
confusionMatrix(predict2, test[,1])
predict1 <- predict(mod1, test)
predict2 <- predict(mod2, test)
confusionMatrix(predict1, test[,1])
confusionMatrix(predict1, test$y)$overall
confusionMatrix(predict1, test$y)$overall[1]
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.1.R', echo=TRUE)
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
View(predDF)
predDF$pred_rf == predDF$pred_gbm
predDF(predDF$pred_rf == predDF$pred_gbm)
predDF$pred_rf(predDF$pred_rf == predDF$pred_gbm)
predDF[1](predDF$pred_rf == predDF$pred_gbm)
pred_rf(predDF$pred_rf == predDF$pred_gbm)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
pred_rf[predDF$pred_rf == predDF$pred_gbm
}
pred_rf[predDF$pred_rf == predDF$pred_gbm]
rm(list=ls())
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.2.R', echo=TRUE)
modRF <- train(diagnosis~predictors,method="rf",data=training)
modRF <- train(diagnosis~.,method="rf",data=training)
resultsRF <- predict(modRF, train$diagnosis)
resultsRF <- predict(modRF, train)
resultsRF <- predict(modRF, training)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA, predict$diagnosis)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.2.R', echo=TRUE)
trainLDA <- train(diagnosis~.,method="lda",data=training)
predictRF <- predict(trainRF, training)
predictBoosted <- predict(trainBoosted, training)
predictLDA <- predict(trainLDA, training)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA, predict$diagnosis)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA)
View(stackdF)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis)
View(training)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA,training[diagnosis])
stackdF <- data.frame(predictRF,predictBoosted,predictLDA,training[,diagnosis])
stackdF <- data.frame(predictRF,predictBoosted,predictLDA,training[,1])
View(stackdF)
qplot(predictRF,predictBoosted,predictLDA,colour=diagnosis,data=testing)
qplot(predictRF,predictBoosted,predictLDA,colour=diagnosis,data=training)
qplot(predictRF,predictBoosted,predictLDA)
stackdF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=training[,1])
View(stackdF)
combodF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=training[,1])
comboDF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=training[,1])
comboDF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=training[,1])
trainComboRF <- train(diagnosis~.,method="rf",data=comboDF)
predictComboRF <- predict(trainComboRF, training)
confusionMatrix(predictRF, testing)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)
predictRF <- predict(trainRF, testing)
predictBoosted <- predict(trainBoosted, testing)
predictLDA <- predict(trainLDA, testing)
comboDF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=testing[,1])
trainComboRF <- train(diagnosis~.,method="rf",data=comboDF)
predictComboRF <- predict(trainComboRF, testing)
View(comboDF)
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictBoosted, testing$diagnosis)$overall[1]
confusionMatrix(predictLDA, testing$diagnosis)$overall[1]
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictBoosted, testing$diagnosis)$overall[1]
confusionMatrix(predictLDA, testing$diagnosis)$overall[1]
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictBoosted, testing$diagnosis)$overall[1]
confusionMatrix(predictLDA, testing$diagnosis)$overall[1]
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictBoosted, testing$diagnosis)$overall[1]
confusionMatrix(predictLDA, testing$diagnosis)$overall[1]
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
comboDF <- data.frame(predictRF,predictBoosted,predictLDA,diagnosis=testing$diagnosis)
trainComboRF <- train(diagnosis~.,data=comboDF,method="rf")
View(comboDF)
predictComboRF <- predict(trainComboRF, comboDF)
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
confusionMatrix(predictRF, testing$diagnosis)$overall[1]
confusionMatrix(predictBoosted, testing$diagnosis)$overall[1]
confusionMatrix(predictLDA, testing$diagnosis)$overall[1]
confusionMatrix(predictComboRF, testing$diagnosis)$overall[1]
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.2b.R', echo=TRUE)
rm(list=ls())
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.3.R', echo=TRUE)
View(concrete)
set.seed(233)
trainLasso = train(data=training, CompressiveStrength~.,method="lasso")
set.seed(233)
trainLasso = train(data=training, CompressiveStrength~.,method="lasso")
trainLasso
?plot.enet
plot(trainLasso)
library(elasticnet)
plot.enet(trainLasso$finalModel)
?plot.enet
plot.enet(trainLasso$finalModel, colour=TRUE)
plot.enet(trainLasso$finalModel, use.colour=TRUE)
plot.enet(trainLasso$finalModel, use.color=TRUE)
plot.enet(trainLasso$finalModel, use.color=TRUE, xvar = "penalty")
rm(list = ls())
library(lubridate) # For year() function below
dat = read.csv("gaData.csv")
getwd()
dat = read.csv("Git/marto12.github.io/coursera-sandbox/gaData.csv")
View(dat)
and test
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
# clear
rm(list = ls())
# load
library(lubridate) # For year() function below
# data
dat = read.csv("Git/marto12.github.io/coursera-sandbox/gaData.csv")
# train and test
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
trainBats <- bats(training)
View(training)
trainBats <- bats(tstrain)
tstrain
plot(forecast(trainBats))
fcast <- forecast(trainBats, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
plot(fcast)
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.4.R', echo=TRUE)
rm(llist = ls())
rm(list = ls())
source('~/Git/marto12.github.io/coursera-sandbox/Quiz 4.5.R', echo=TRUE)
library(e1071)
trainSVM <- svm(CompressiveStrength ~ ., data = training)
View(training)
dim(training)
trainSVM <- svm(CompressiveStrength ~ ., data = training)
predictSVM  <- predict(trainSVM, testset[,-9])
predictSVM  <- predict(trainSVM, training[,-9])
confusionMatrix(predictSVM,training)
confusionMatrix(predictSVM,training[,9])
predictSVM
dim(predictSVM)
summary(predictSVM)
typeof(predictSVM)
dim(predictSVM)
rowsum(predictSVM)
confusionMatrix(predictSVM,training$CompressiveStrength)
training$CompressiveStrength
df <- data.frame(predictSVM, training$CompressiveStrength)
View(df)
confusionMatrix(predictSVM,training$CompressiveStrength)
typeof(training$CompressiveStrength)
df <- data.frame(pred=predictSVM, y=training$CompressiveStrength)
View(df)
confusionMatrix(df$pred,df$y)
View(df)
accuracy(predictSVM,training$CompressiveStrength)
predictSVM  <- predict(trainSVM, testing[,-9])
accuracy(predictSVM,testing$CompressiveStrength)
rm(list = ls())
library(caret)
dat = read.csv("Git/marto12.github.io/coursera-sandbox/pml-training.csv")
rm(list = ls())
library(caret)
training = read.csv("Git/marto12.github.io/coursera-sandbox/pml-training.csv")
testing = read.csv("Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
View(testing)
View(training)
inTrain = createDataPartition(training$classe, p = 0.6)[[1]]
# clear
rm(list = ls())
# library
library(caret)
# data
fullTraining = read.csv("Git/marto12.github.io/coursera-sandbox/pml-training.csv")
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv")
finalTesting = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
testing = fullTraining[-inTrain,]
inTrain = createDataPartition(fullTraining$classe, p = 0.6)[[1]]
training = fullTraining[ inTrain,]
testing = fullTraining[-inTrain,]
# clear
rm(list = ls())
# library
library(caret)
# data
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv")
finalTesting = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
inTrain = createDataPartition(fullTraining$classe, p = 0.6)[[1]]
training = fullTraining[ inTrain,]
validation = fullTraining[-inTrain,]
trainLM = train(data=training, classe~.,data=training)
trainLM = train(data=training, classe~.,type="lm")
trainLM = train(data=training, classe~.,method="lm")
trainRF = train(data=training, classe~.,method="rf")
View(training)
trainBoosted = train(data=training, classe~.,method="gbm")
trainBoosted <- train(classe~.,data=training,method="gbm")
var pc <- training$raw_timestamp_part_1 / training$classe
pc <- training$raw_timestamp_part_1 / training$classe
pc <- is.na(training$raw_timestamp_part_1)
pc <- is.na(training$raw_timestamp_part_1) / is.na(training$classe)
pc <- is.na(training$raw_timestamp_part_1)
pc2 <- is.na(training$classe)
pc <- na.omit(training$raw_timestamp_part_1)
pc2 <- na.omit(training$classe)
dim(pc)
nrow(pc)
nrow(pc2)
pc <- na.omit(training$raw_timestamp_part_1)
pc2 <- na.omit(training$classe)
nrow(pc)
nrow(pc2)
typeof(pc)
typeof(pc2)
length(pc)
length(pc2)
pc <-
pc2 <-
length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
pc
pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
preProcValues <- preProcess(training, method = c("knnImpute"))
library(caret)
# clear
rm(list = ls())
# library
library(caret)
# data
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv")
#finalTesting = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
inTrain = createDataPartition(fullTraining$classe, p = 0.6)[[1]]
training = fullTraining[ inTrain,]
validation = fullTraining[-inTrain,]
# Test for missing values
pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
preProcValues <- preProcess(training, method = c("knnImpute"))
t_imp <- predict(preProcValues, training)
library(RANN)
install.packages("rann")
y
install.packages("RANN")
library(RANN)
preProcValues <- preProcess(training, method = c("knnImpute"))
t_imp <- predict(preProcValues, training)
View(t_imp)
View(training)
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv",header = TRUE,na.strings = c("NA","NaN","","#DIV/0!"))
View(fullTraining)
mydf[!sapply(fullTraining, function(x) all(x == ""))]
fullTraining[!sapply(fullTraining, function(x) all(x == ""))]
emptycols <- sapply(fullTraining, function (k) all(is.na(k)))
fullTraining <- fullTraining[!emptycols]
View(fullTraining)
zerocols <- sapply(fullTraining, function (k) all(k==0))
fullTraining <- fullTraining[!zerocols]
zerocols <- sapply(fullTraining, function (k) all(k==0))
fullTraining <- fullTraining[!zerocols]
fullTraining[, colSums(fullTraining != 0) > 0]
fullTraining[, colSums(fullTraining != 0) > 0]
preProcValues <- preProcess(training, method = c("knnImpute")) # have to apply this to testing set too.
t_imp <- predict(preProcValues, training)
# clear
rm(list = ls())
# library
library(caret)
library(RANN)
library(dplyr)
# data
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv",header = TRUE,na.strings = c("NA","NaN","","#DIV/0!"))
#finalTesting = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
inTrain = createDataPartition(fullTraining$classe, p = 0.6)[[1]]
training = fullTraining[ inTrain,]
validation = fullTraining[-inTrain,]
# Test for missing values
# pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
emptycols <- sapply(training, function (k) all(is.na(k)))
training <- training[!emptycols]
preProcValues <- preProcess(training, method = c("knnImpute")) # have to apply this to testing set too.
training2 <- predict(preProcValues, training)
View(training2)
trainBoosted <- train(classe~.,data=training2,method="gbm")
# clear
rm(list = ls())
# library
library(caret)
library(RANN)
library(dplyr)
# data
fullTraining = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-training.csv",header = TRUE,na.strings = c("NA","NaN","","#DIV/0!"))
#finalTesting = read.csv("/Users/admin/Git/marto12.github.io/coursera-sandbox/pml-testing.csv")
inTrain = createDataPartition(fullTraining$classe, p = 0.6)[[1]]
training = fullTraining[ inTrain,]
validation = fullTraining[-inTrain,]
# Test for missing values
# pc <- length(na.omit(training$raw_timestamp_part_1)) /length(na.omit(training$classe))
emptycols <- sapply(training, function (k) all(is.na(k)))
training <- training[!emptycols]
training[, colSums(abs(training)) ! == 0]
preProcValues <- preProcess(training, method = c("knnImpute")) # have to apply this to testing set too.
training2 <- predict(preProcValues, training)
#trainBoosted <- train(classe~.,data=training2,method="gbm")
trainRF <- train(classe~.,data=training2,method="rf")
